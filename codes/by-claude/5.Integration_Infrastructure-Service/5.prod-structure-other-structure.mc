# üöÄ Sub-Project 5: Integration & Communication Domain - Complete Implementation Guide

## üìã **B·∫¢NG T·ªîNG H·ª¢P T·∫§T C·∫¢ FILES V√Ä REFERENCES**

| **Category** | **File Path** | **M√¥ t·∫£** | **SRS Reference** | **Business Purpose** |
|-------------|---------------|-----------|-------------------|-------------------|
| **üì¶ SHARED PACKAGES** | | | | |
| Core Package | `@psp/shared-core@1.2.0` | Common utilities package | Part02.8 Technical Requirements | Cross-service utilities (logger, validation, crypto) |
| Events Package | `@psp/shared-events@1.1.0` | Domain events contracts | Part06.1.2 Event Bus | Event-driven communication between services |
| Database Package | `@psp/shared-database@1.0.5` | Database utilities | Part07.1 Data Model Overview | DB connection management, migrations |
| **üóÉÔ∏è BACKEND DOMAIN** | | | | |
| Entities | `backend/src/domain/entities/Notification.ts` | Core notification entity v·ªõi business rules | Part04.3.4 Notification System (FR-010) | Encapsulate multi-channel notification logic |
| Entities | `backend/src/domain/entities/NotificationTemplate.ts` | Template entity cho reusable notifications | Part04.3.4 Notification System (FR-010) | Standardized notification formats |
| Entities | `backend/src/domain/entities/NotificationDelivery.ts` | Delivery tracking entity | Part04.3.4 Notification System (FR-010) | Track delivery status across channels |
| Entities | `backend/src/domain/entities/CRMContact.ts` | CRM contact entity cho data sync | Part04.3.3 CRM Integration (FR-009) | Manage CRM contact data mapping |
| Entities | `backend/src/domain/entities/CRMIntegration.ts` | CRM integration configuration entity | Part04.3.3 CRM Integration (FR-009) | Manage CRM system connections |
| Entities | `backend/src/domain/entities/CRMSyncJob.ts` | CRM synchronization job entity | Part04.3.3 CRM Integration (FR-009) | Track sync operations |
| Entities | `backend/src/domain/entities/MessageQueue.ts` | Message queue entity | Part06.1.2 Event Bus | RabbitMQ message management |
| Entities | `backend/src/domain/entities/CommunicationChannel.ts` | Communication channel entity | Part04.3.4 Notification System | Channel configuration v√† management |
| Value Objects | `backend/src/domain/value-objects/NotificationChannel.ts` | Notification channel value object | Part04.3.4 Notification System | Channel validation (SMS/Email/Push) |
| Value Objects | `backend/src/domain/value-objects/DeliveryStatus.ts` | Delivery status value object | Part04.3.4 Notification System | Status tracking (Sent/Delivered/Failed) |
| Value Objects | `backend/src/domain/value-objects/CRMCredentials.ts` | CRM authentication credentials | Part04.3.3 CRM Integration | Secure credential handling |
| Value Objects | `backend/src/domain/value-objects/ContactData.ts` | Contact data value object | Part04.3.3 CRM Integration | Contact information validation |
| Value Objects | `backend/src/domain/value-objects/MessagePriority.ts` | Message priority value object | Part04.3.4 Notification System | Priority-based delivery |
| Value Objects | `backend/src/domain/value-objects/SyncStatus.ts` | Synchronization status value object | Part04.3.3 CRM Integration | Sync operation status |
| Repositories | `backend/src/domain/repositories/INotificationRepository.ts` | Notification repository interface | Part06.2.1 Layered Architecture | Notification storage contract |
| Repositories | `backend/src/domain/repositories/INotificationTemplateRepository.ts` | Template repository interface | Part06.2.1 Layered Architecture | Template storage contract |
| Repositories | `backend/src/domain/repositories/ICRMContactRepository.ts` | CRM contact repository interface | Part06.2.1 Layered Architecture | CRM data access contract |
| Repositories | `backend/src/domain/repositories/ICRMIntegrationRepository.ts` | CRM integration repository interface | Part06.2.1 Layered Architecture | Integration config contract |
| Repositories | `backend/src/domain/repositories/IMessageQueueRepository.ts` | Message queue repository interface | Part06.2.1 Layered Architecture | Queue storage contract |
| Repositories | `backend/src/domain/repositories/ICommunicationChannelRepository.ts` | Channel repository interface | Part06.2.1 Layered Architecture | Channel config contract |
| Domain Services | `backend/src/domain/services/NotificationRoutingDomainService.ts` | Notification routing business logic | Part04.3.4 Notification System (FR-010) | Multi-channel routing algorithms |
| Domain Services | `backend/src/domain/services/NotificationDeliveryDomainService.ts` | Delivery optimization logic | Part04.3.4 Notification System (FR-010) | Delivery strategy v√† retry logic |
| Domain Services | `backend/src/domain/services/CRMSyncDomainService.ts` | CRM synchronization business logic | Part04.3.3 CRM Integration (FR-009) | Bi-directional sync algorithms |
| Domain Services | `backend/src/domain/services/ContactDeduplicationDomainService.ts` | Contact deduplication logic | Part04.3.3 CRM Integration (FR-009) | Duplicate detection v√† merging |
| Domain Services | `backend/src/domain/services/MessageQueueManagementDomainService.ts` | Queue management logic | Part06.1.2 Event Bus | Queue prioritization v√† management |
| **üìÑ BACKEND APPLICATION** | | | | |
| Use Cases | `backend/src/application/use-cases/notifications/SendNotificationUseCase.ts` | Send notification workflow | Part04.3.4 Notification System (FR-010) | Multi-channel notification delivery |
| Use Cases | `backend/src/application/use-cases/notifications/SendBatchNotificationUseCase.ts` | Batch notification sending | Part04.3.4 Notification System (FR-010) | Bulk notification processing |
| Use Cases | `backend/src/application/use-cases/notifications/ScheduleNotificationUseCase.ts` | Schedule notification workflow | Part04.3.4 Notification System (FR-010) | Delayed notification delivery |
| Use Cases | `backend/src/application/use-cases/notifications/GetNotificationStatusUseCase.ts` | Notification status tracking | Part04.3.4 Notification System (FR-010) | Delivery status monitoring |
| Use Cases | `backend/src/application/use-cases/notifications/CreateNotificationTemplateUseCase.ts` | Template creation workflow | Part04.3.4 Notification System (FR-010) | Reusable template management |
| Use Cases | `backend/src/application/use-cases/notifications/UpdateNotificationTemplateUseCase.ts` | Template update workflow | Part04.3.4 Notification System (FR-010) | Template modification |
| Use Cases | `backend/src/application/use-cases/notifications/CancelNotificationUseCase.ts` | Cancel scheduled notification | Part04.3.4 Notification System (FR-010) | Notification cancellation |
| Use Cases | `backend/src/application/use-cases/notifications/RetryFailedNotificationUseCase.ts` | Retry failed notifications | Part04.3.4 Notification System (FR-010) | Delivery retry mechanism |
| Use Cases | `backend/src/application/use-cases/crm/SyncContactToCRMUseCase.ts` | CRM contact synchronization | Part04.3.3 CRM Integration (FR-009) | Push data to CRM systems |
| Use Cases | `backend/src/application/use-cases/crm/ImportContactsFromCRMUseCase.ts` | Import contacts from CRM | Part04.3.3 CRM Integration (FR-009) | Pull data from CRM systems |
| Use Cases | `backend/src/application/use-cases/crm/ValidateCRMConnectionUseCase.ts` | CRM connection validation | Part04.3.3 CRM Integration (FR-009) | Test CRM connectivity |
| Use Cases | `backend/src/application/use-cases/crm/DeduplicateCRMContactsUseCase.ts` | CRM contact deduplication | Part04.3.3 CRM Integration (FR-009) | Data quality management |
| Use Cases | `backend/src/application/use-cases/crm/SyncCRMDataBidirectionalUseCase.ts` | Bi-directional CRM sync | Part04.3.3 CRM Integration (FR-009) | Two-way data synchronization |
| Use Cases | `backend/src/application/use-cases/crm/SetupCRMIntegrationUseCase.ts` | CRM integration setup | Part04.3.3 CRM Integration (FR-009) | Initial CRM configuration |
| Use Cases | `backend/src/application/use-cases/crm/MonitorCRMSyncJobUseCase.ts` | Monitor sync jobs | Part04.3.3 CRM Integration (FR-009) | Sync job status tracking |
| Use Cases | `backend/src/application/use-cases/messaging/ProcessMessageQueueUseCase.ts` | Message queue processing | Part06.1.2 Event Bus | RabbitMQ message handling |
| Use Cases | `backend/src/application/use-cases/messaging/PublishMessageUseCase.ts` | Publish message to queue | Part06.1.2 Event Bus | Event publishing |
| Use Cases | `backend/src/application/use-cases/messaging/ConsumeMessageUseCase.ts` | Consume message from queue | Part06.1.2 Event Bus | Event consumption |
| Use Cases | `backend/src/application/use-cases/messaging/HandleDeadLetterQueueUseCase.ts` | Dead letter queue handling | Part06.1.2 Event Bus | Failed message management |
| DTOs | `backend/src/application/dto/NotificationDTO.ts` | Notification data transfer objects | Part08.5.1 Notification APIs | API contract definitions |
| DTOs | `backend/src/application/dto/NotificationTemplateDTO.ts` | Template DTOs | Part08.5.1 Notification APIs | Template API contracts |
| DTOs | `backend/src/application/dto/CRMDTO.ts` | CRM integration DTOs | Part08.5.2 CRM Integration APIs | CRM API contracts |
| DTOs | `backend/src/application/dto/CRMContactDTO.ts` | CRM contact DTOs | Part08.5.2 CRM Integration APIs | Contact API contracts |
| DTOs | `backend/src/application/dto/MessageQueueDTO.ts` | Message queue DTOs | Part06.1.2 Event Bus | Queue API contracts |
| DTOs | `backend/src/application/dto/CommunicationChannelDTO.ts` | Channel configuration DTOs | Part04.3.4 Notification System | Channel API contracts |
| Ports | `backend/src/application/ports/ITwilioService.ts` | Twilio service interface | Part09.1.1 Twilio Integration | SMS service integration |
| Ports | `backend/src/application/ports/ISendGridService.ts` | SendGrid service interface | Part09.1.1 Twilio Integration | Email service integration |
| Ports | `backend/src/application/ports/IFirebaseService.ts` | Firebase service interface | Part09.1.4 Firebase Integration | Push notification service |
| Ports | `backend/src/application/ports/IHubSpotService.ts` | HubSpot service interface | Part09.1.2 HubSpot Integration | HubSpot CRM integration |
| Ports | `backend/src/application/ports/ISalesforceService.ts` | Salesforce service interface | Part09.1.3 Salesforce Integration | Salesforce CRM integration |
| Ports | `backend/src/application/ports/IRabbitMQService.ts` | RabbitMQ service interface | Part06.1.2 Event Bus | Message bus integration |
| Ports | `backend/src/application/ports/IEmailTemplateService.ts` | Email template service interface | Part04.3.4 Notification System | Template processing |
| Ports | `backend/src/application/ports/ISMSTemplateService.ts` | SMS template service interface | Part04.3.4 Notification System | SMS template processing |
| **üóÉÔ∏è BACKEND INFRASTRUCTURE** | | | | |
| Repositories | `backend/src/infrastructure/persistence/repositories/NotificationRepository.ts` | PostgreSQL notification repository | Part07.6.1 Notification Table | Notification data persistence |
| Repositories | `backend/src/infrastructure/persistence/repositories/NotificationTemplateRepository.ts` | Template repository implementation | Part07.6.1 Notification Table | Template data persistence |
| Repositories | `backend/src/infrastructure/persistence/repositories/CRMContactRepository.ts` | CRM contact data access | Part07.6.2 CRM_Contact Table | CRM data persistence |
| Repositories | `backend/src/infrastructure/persistence/repositories/CRMIntegrationRepository.ts` | CRM integration config storage | Part07.6.2 CRM_Contact Table | Integration config persistence |
| Repositories | `backend/src/infrastructure/persistence/repositories/MessageQueueRepository.ts` | Message queue repository | Part07.6.4 Event_Log Table | Queue metadata persistence |
| Repositories | `backend/src/infrastructure/persistence/repositories/CommunicationChannelRepository.ts` | Channel config repository | Part07.6.1 Notification Table | Channel config persistence |
| Models | `backend/src/infrastructure/persistence/models/NotificationModel.ts` | Prisma notification model | Part07.6.1 Notification Table | Notification schema mapping |
| Models | `backend/src/infrastructure/persistence/models/NotificationTemplateModel.ts` | Template database model | Part07.6.1 Notification Table | Template schema mapping |
| Models | `backend/src/infrastructure/persistence/models/CRMContactModel.ts` | CRM contact database model | Part07.6.2 CRM_Contact Table | CRM schema mapping |
| Models | `backend/src/infrastructure/persistence/models/CRMIntegrationModel.ts` | CRM integration model | Part07.6.2 CRM_Contact Table | Integration schema mapping |
| Models | `backend/src/infrastructure/persistence/models/MessageQueueModel.ts` | Message queue model | Part07.6.4 Event_Log Table | Queue schema mapping |
| Models | `backend/src/infrastructure/persistence/models/CommunicationChannelModel.ts` | Channel model | Part07.6.1 Notification Table | Channel schema mapping |
| Migrations | `backend/src/infrastructure/persistence/migrations/001_create_notifications.sql` | Notification tables creation | Part07.6.1 Notification Table | Notification schema setup |
| Migrations | `backend/src/infrastructure/persistence/migrations/002_create_crm_contacts.sql` | CRM contact tables creation | Part07.6.2 CRM_Contact Table | CRM data schema setup |
| Migrations | `backend/src/infrastructure/persistence/migrations/003_create_notification_templates.sql` | Template tables creation | Part07.6.1 Notification Table | Template schema setup |
| Migrations | `backend/src/infrastructure/persistence/migrations/004_create_crm_integrations.sql` | CRM integration tables | Part07.6.2 CRM_Contact Table | Integration schema setup |
| Migrations | `backend/src/infrastructure/persistence/migrations/005_create_message_queues.sql` | Message queue tables | Part07.6.4 Event_Log Table | Queue metadata schema |
| Migrations | `backend/src/infrastructure/persistence/migrations/006_create_communication_channels.sql` | Channel configuration tables | Part07.6.1 Notification Table | Channel config schema |
| External Services | `backend/src/infrastructure/external-services/TwilioAdapter.ts` | Twilio service adapter | Part09.1.1 Twilio Integration | SMS delivery via Twilio |
| External Services | `backend/src/infrastructure/external-services/SendGridAdapter.ts` | SendGrid email adapter | Part09.1.1 Twilio Integration | Email delivery via SendGrid |
| External Services | `backend/src/infrastructure/external-services/FirebaseAdapter.ts` | Firebase push notifications | Part09.1.4 Firebase Integration | Push notification delivery |
| External Services | `backend/src/infrastructure/external-services/HubSpotAdapter.ts` | HubSpot CRM adapter | Part09.1.2 HubSpot Integration | HubSpot API integration |
| External Services | `backend/src/infrastructure/external-services/SalesforceAdapter.ts` | Salesforce CRM adapter | Part09.1.3 Salesforce Integration | Salesforce API integration |
| External Services | `backend/src/infrastructure/external-services/RabbitMQAdapter.ts` | RabbitMQ event bus adapter | Part06.1.2 Event Bus | Message queue integration |
| External Services | `backend/src/infrastructure/external-services/EmailTemplateAdapter.ts` | Email template processor | Part04.3.4 Notification System | Email template rendering |
| External Services | `backend/src/infrastructure/external-services/SMSTemplateAdapter.ts` | SMS template processor | Part04.3.4 Notification System | SMS template rendering |
| External Services | `backend/src/infrastructure/external-services/WebhookAdapter.ts` | Webhook delivery adapter | Part04.3.4 Notification System | Webhook notification delivery |
| Config | `backend/src/infrastructure/config/NotificationConfig.ts` | Notification service configuration | Part04.3.4 Notification System | Multi-channel settings |
| Config | `backend/src/infrastructure/config/CRMConfig.ts` | CRM integration configuration | Part04.3.3 CRM Integration | CRM connection settings |
| Config | `backend/src/infrastructure/config/TwilioConfig.ts` | Twilio configuration | Part09.1.1 Twilio Integration | SMS service config |
| Config | `backend/src/infrastructure/config/SendGridConfig.ts` | SendGrid configuration | Part09.1.1 Twilio Integration | Email service config |
| Config | `backend/src/infrastructure/config/FirebaseConfig.ts` | Firebase configuration | Part09.1.4 Firebase Integration | Push notification config |
| Config | `backend/src/infrastructure/config/RabbitMQConfig.ts` | RabbitMQ configuration | Part06.1.2 Event Bus | Message bus settings |
| Config | `backend/src/infrastructure/config/HubSpotConfig.ts` | HubSpot configuration | Part09.1.2 HubSpot Integration | HubSpot API config |
| Config | `backend/src/infrastructure/config/SalesforceConfig.ts` | Salesforce configuration | Part09.1.3 Salesforce Integration | Salesforce API config |
| **üéÆ BACKEND PRESENTATION** | | | | |
| Controllers | `backend/src/presentation/controllers/NotificationController.ts` | Notification REST endpoints | Part08.5.1 Notification APIs | Multi-channel notification endpoints |
| Controllers | `backend/src/presentation/controllers/NotificationTemplateController.ts` | Template management endpoints | Part08.5.1 Notification APIs | Template CRUD endpoints |
| Controllers | `backend/src/presentation/controllers/CRMController.ts` | CRM integration REST endpoints | Part08.5.2 CRM Integration APIs | CRM sync endpoints |
| Controllers | `backend/src/presentation/controllers/CRMContactController.ts` | CRM contact management endpoints | Part08.5.2 CRM Integration APIs | Contact CRUD endpoints |
| Controllers | `backend/src/presentation/controllers/MessageQueueController.ts` | Message queue management endpoints | Part06.1.2 Event Bus | Queue monitoring endpoints |
| Controllers | `backend/src/presentation/controllers/CommunicationChannelController.ts` | Channel configuration endpoints | Part04.3.4 Notification System | Channel management endpoints |
| Controllers | `backend/src/presentation/controllers/HealthController.ts` | Service health endpoints | Part14.3 Monitoring Stack | Health check endpoints |
| Controllers | `backend/src/presentation/controllers/MetricsController.ts` | Service metrics endpoints | Part14.3 Monitoring Stack | Metrics collection endpoints |
| Middleware | `backend/src/presentation/middleware/AuthenticationMiddleware.ts` | API authentication middleware | Part05.3 Security Requirements | JWT validation |
| Middleware | `backend/src/presentation/middleware/RateLimitMiddleware.ts` | Rate limiting middleware | Part06.1.1 API Gateway | API protection |
| Middleware | `backend/src/presentation/middleware/RequestLoggingMiddleware.ts` | Request logging middleware | Part06.1.1 API Gateway | Request tracking |
| Middleware | `backend/src/presentation/middleware/ErrorHandlingMiddleware.ts` | Centralized error handling | Part05.4 Error Handling | Consistent error responses |
| Middleware | `backend/src/presentation/middleware/ValidationMiddleware.ts` | Input validation middleware | Part05.7 Input Validation | Request validation |
| Middleware | `backend/src/presentation/middleware/CORSMiddleware.ts` | CORS handling middleware | Part06.1.1 API Gateway | Cross-origin support |
| Routes | `backend/src/presentation/routes/NotificationRoutes.ts` | Notification API route definitions | Part08.5.1 Notification APIs | Notification routing |
| Routes | `backend/src/presentation/routes/CRMRoutes.ts` | CRM integration route definitions | Part08.5.2 CRM Integration APIs | CRM sync routing |
| Routes | `backend/src/presentation/routes/TemplateRoutes.ts` | Template management routing | Part08.5.1 Notification APIs | Template routing |
| Routes | `backend/src/presentation/routes/MessageQueueRoutes.ts` | Queue management routing | Part06.1.2 Event Bus | Queue routing |
| Routes | `backend/src/presentation/routes/ChannelRoutes.ts` | Channel configuration routing | Part04.3.4 Notification System | Channel routing |
| Routes | `backend/src/presentation/routes/HealthRoutes.ts` | Health check route definitions | Part14.3 Monitoring Stack | Health routing |
| Validators | `backend/src/presentation/validators/NotificationValidator.ts` | Notification input validation | Part05.7 Input Validation | Notification data validation |
| Validators | `backend/src/presentation/validators/CRMValidator.ts` | CRM input validation | Part05.7 Input Validation | CRM data validation |
| Validators | `backend/src/presentation/validators/TemplateValidator.ts` | Template validation | Part05.7 Input Validation | Template data validation |
| Validators | `backend/src/presentation/validators/ContactValidator.ts` | Contact data validation | Part05.7 Input Validation | Contact information validation |
| Validators | `backend/src/presentation/validators/ChannelValidator.ts` | Channel configuration validation | Part05.7 Input Validation | Channel config validation |
| **üîß BACKEND SHARED** | | | | |
| Constants | `backend/src/shared/constants/NotificationConstants.ts` | Notification application constants | Part04.3.4 Notification System | Notification limits, channels |
| Constants | `backend/src/shared/constants/CRMConstants.ts` | CRM integration constants | Part04.3.3 CRM Integration | CRM endpoints, timeouts |
| Constants | `backend/src/shared/constants/MessageQueueConstants.ts` | Message queue constants | Part06.1.2 Event Bus | Queue limits, retry counts |
| Constants | `backend/src/shared/constants/CommunicationConstants.ts` | Communication constants | Part04.3.4 Notification System | Channel types, priorities |
| Constants | `backend/src/shared/constants/IntegrationConstants.ts` | Integration constants | Part09 Integration | Service endpoints, timeouts |
| Exceptions | `backend/src/shared/exceptions/NotificationException.ts` | Notification-specific exceptions | Part05.4 Error Handling | Custom notification errors |
| Exceptions | `backend/src/shared/exceptions/CRMException.ts` | CRM integration exceptions | Part05.4 Error Handling | CRM-specific errors |
| Exceptions | `backend/src/shared/exceptions/MessageQueueException.ts` | Message queue exceptions | Part05.4 Error Handling | Queue-specific errors |
| Exceptions | `backend/src/shared/exceptions/CommunicationException.ts` | Communication exceptions | Part05.4 Error Handling | Channel-specific errors |
| Exceptions | `backend/src/shared/exceptions/IntegrationException.ts` | Integration exceptions | Part05.4 Error Handling | Integration-specific errors |
| Types | `backend/src/shared/types/NotificationTypes.ts` | Notification TypeScript definitions | Part08.5.1 Notification APIs | Notification type definitions |
| Types | `backend/src/shared/types/CRMTypes.ts` | CRM integration type definitions | Part08.5.2 CRM Integration APIs | CRM type definitions |
| Types | `backend/src/shared/types/MessageQueueTypes.ts` | Message queue type definitions | Part06.1.2 Event Bus | Queue type definitions |
| Types | `backend/src/shared/types/CommunicationTypes.ts` | Communication type definitions | Part04.3.4 Notification System | Channel type definitions |
| Types | `backend/src/shared/types/IntegrationTypes.ts` | Integration type definitions | Part09 Integration | Integration type definitions |
| Utils | `backend/src/shared/utils/NotificationUtils.ts` | Notification utility functions | Part04.3.4 Notification System | Template parsing, formatting |
| Utils | `backend/src/shared/utils/CRMUtils.ts` | CRM utility functions | Part04.3.3 CRM Integration | Data mapping, deduplication |
| Utils | `backend/src/shared/utils/MessageQueueUtils.ts` | Message queue utilities | Part06.1.2 Event Bus | Queue management helpers |
| Utils | `backend/src/shared/utils/TemplateUtils.ts` | Template utility functions | Part04.3.4 Notification System | Template rendering helpers |
| Utils | `backend/src/shared/utils/ContactUtils.ts` | Contact utility functions | Part04.3.3 CRM Integration | Contact validation, formatting |
| Utils | `backend/src/shared/utils/EncryptionUtils.ts` | Security utilities | Part05.3 Security Requirements | Data encryption helpers |
| Utils | `backend/src/shared/utils/RetryUtils.ts` | Retry mechanism utilities | Part06.4 Resilience Patterns | Exponential backoff, circuit breaker |
| **üß™ BACKEND TESTING** | | | | |
| Unit Tests | `backend/tests/unit/domain/entities/Notification.test.ts` | Notification entity tests | Part12.1 Unit Testing | Domain logic testing |
| Unit Tests | `backend/tests/unit/domain/entities/CRMContact.test.ts` | CRM contact entity tests | Part12.1 Unit Testing | CRM logic testing |
| Unit Tests | `backend/tests/unit/domain/entities/NotificationTemplate.test.ts` | Template entity tests | Part12.1 Unit Testing | Template logic testing |
| Unit Tests | `backend/tests/unit/domain/services/NotificationRoutingService.test.ts` | Notification routing tests | Part12.1 Unit Testing | Routing algorithm testing |
| Unit Tests | `backend/tests/unit/domain/services/CRMSyncService.test.ts` | CRM sync service tests | Part12.1 Unit Testing | Sync logic testing |
| Unit Tests | `backend/tests/unit/application/use-cases/SendNotification.test.ts` | Send notification use case tests | Part12.1 Unit Testing | Notification workflow testing |
| Unit Tests | `backend/tests/unit/application/use-cases/SyncContactToCRM.test.ts` | CRM sync use case tests | Part12.1 Unit Testing | CRM workflow testing |
| Unit Tests | `backend/tests/unit/application/use-cases/ProcessMessageQueue.test.ts` | Message queue processing tests | Part12.1 Unit Testing | Queue workflow testing |
| Integration Tests | `backend/tests/integration/repositories/NotificationRepository.test.ts` | Notification repository tests | Part12.2 Integration Testing | Database integration testing |
| Integration Tests | `backend/tests/integration/repositories/CRMContactRepository.test.ts` | CRM repository tests | Part12.2 Integration Testing | CRM data testing |
| Integration Tests | `backend/tests/integration/external-services/TwilioAdapter.test.ts` | Twilio adapter tests | Part12.2 Integration Testing | External SMS service testing |
| Integration Tests | `backend/tests/integration/external-services/HubSpotAdapter.test.ts` | HubSpot adapter tests | Part12.2 Integration Testing | External CRM service testing |
| Integration Tests | `backend/tests/integration/external-services/RabbitMQAdapter.test.ts` | RabbitMQ adapter tests | Part12.2 Integration Testing | Message queue testing |
| Integration Tests | `backend/tests/integration/external-services/SendGridAdapter.test.ts` | SendGrid adapter tests | Part12.2 Integration Testing | Email service testing |
| E2E Tests | `backend/tests/e2e/notifications/notification-flow.test.ts` | Notification E2E tests | Part12.3 E2E Testing | Complete notification flow |
| E2E Tests | `backend/tests/e2e/crm/crm-sync-flow.test.ts` | CRM sync E2E tests | Part12.3 E2E Testing | Complete CRM integration flow |
| E2E Tests | `backend/tests/e2e/messaging/message-queue-flow.test.ts` | Message queue E2E tests | Part12.3 E2E Testing | Complete messaging flow |
| E2E Tests | `backend/tests/e2e/integration/full-integration-flow.test.ts` | Full integration E2E tests | Part12.3 E2E Testing | Complete integration flow |
| **ü≥π INFRASTRUCTURE AS CODE** | | | | |
| Kubernetes | `k8s/namespaces/integration-communication-namespace.yaml` | Kubernetes namespace definition | Part14.1 Kubernetes Setup | Service isolation |
| Kubernetes | `k8s/deployments/notification-service.yaml` | Notification service deployment | Part14.1 Kubernetes Setup | Notification service K8s config |
| Kubernetes | `k8s/deployments/crm-service.yaml` | CRM service deployment | Part14.1 Kubernetes Setup | CRM service K8s config |
| Kubernetes | `k8s/deployments/rabbitmq.yaml` | RabbitMQ deployment | Part14.1 Kubernetes Setup | Message queue K8s config |
| Kubernetes | `k8s/services/notification-service.yaml` | Notification service K8s service | Part14.1 Kubernetes Setup | Service networking |
| Kubernetes | `k8s/services/crm-service.yaml` | CRM service K8s service | Part14.1 Kubernetes Setup | CRM service networking |
| Kubernetes | `k8s/services/rabbitmq-service.yaml` | RabbitMQ service | Part14.1 Kubernetes Setup | Message queue networking |
| Kubernetes | `k8s/configmaps/notification-config.yaml` | Notification configuration | Part14.1 Kubernetes Setup | Service configuration |
| Kubernetes | `k8s/configmaps/crm-config.yaml` | CRM configuration | Part14.1 Kubernetes Setup | CRM configuration |
| Kubernetes | `k8s/secrets/twilio-secrets.yaml` | Twilio credentials | Part14.1 Kubernetes Setup | SMS service credentials |
| Kubernetes | `k8s/secrets/sendgrid-secrets.yaml` | SendGrid credentials | Part14.1 Kubernetes Setup | Email service credentials |
| Kubernetes | `k8s/secrets/hubspot-secrets.yaml` | HubSpot credentials | Part14.1 Kubernetes Setup | CRM service credentials |
| Kubernetes | `k8s/ingress/integration-communication-ingress.yaml` | Service ingress configuration | Part14.1 Kubernetes Setup | External access configuration |
| Docker | `docker/notification-service.Dockerfile` | Notification service container | Part15.1 Container Orchestration | Service containerization |
| Docker | `docker/crm-service.Dockerfile` | CRM service container | Part15.1 Container Orchestration | CRM service containerization |
| Docker | `docker-compose.yml` | Local development environment | Part15.1 Container Orchestration | Local development setup |
| CI/CD | `.github/workflows/integration-communication-ci.yml` | Continuous integration pipeline | Part15.2 CI/CD Pipelines | Automated testing v√† building |
| CI/CD | `.github/workflows/integration-communication-cd.yml` | Continuous deployment pipeline | Part15.2 CI/CD Pipelines | Automated deployment |
| CI/CD | `scripts/deploy-integration-communication.sh` | Deployment script | Part15.2 CI/CD Pipelines | Service deployment automation |
| CI/CD | `scripts/health-check-integration-communication.sh` | Health check script | Part15.2 CI/CD Pipelines | Service health verification |
| Monitoring | `monitoring/prometheus/integration-communication-metrics.yaml` | Prometheus metrics configuration | Part14.3 Monitoring Stack | Metrics collection |
| Monitoring | `monitoring/grafana/dashboards/integration-communication-dashboard.json` | Grafana dashboard | Part14.3 Monitoring Stack | Service monitoring |
| Monitoring | `monitoring/alerts/integration-communication-alerts.yaml` | Alert rules | Part14.3 Monitoring Stack | Service alerting |
| **üìö DOCUMENTATION** | | | | |
| API Documentation | `docs/api/notification-api.md` | Notification API documentation | Part08.5.1 Notification APIs | API reference guide |
| API Documentation | `docs/api/crm-integration-api.md` | CRM integration API documentation | Part08.5.2 CRM Integration APIs | CRM API reference |
| API Documentation | `docs/api/message-queue-api.md` | Message queue API documentation | Part06.1.2 Event Bus | Queue API reference |
| Architecture Documentation | `docs/architecture/integration-communication-architecture.md` | Service architecture guide | Part06.2.1 Layered Architecture | Architectural overview |
| Implementation Documentation | `docs/implementation/notification-implementation.md` | Notification implementation guide | Part04.3.4 Notification System | Implementation details |
| Implementation Documentation | `docs/implementation/crm-integration-implementation.md` | CRM integration guide | Part04.3.3 CRM Integration | Integration setup guide |
| Deployment Documentation | `docs/deployment/integration-communication-deployment.md` | Deployment guide | Part14 Deployment Architecture | Production deployment |
| Monitoring Documentation | `docs/monitoring/integration-communication-monitoring.md` | Monitoring guide | Part14.3 Monitoring Stack | Monitoring setup |
| Configuration Documentation | `docs/configuration/integration-communication-config.md` | Configuration guide | Part02.8 Technical Requirements | Service configuration |
| **üîß PROJECT CONFIGURATION** | | | | |
| Project Setup | `package.json` | Node.js project configuration | Part02.8 Technical Requirements | Dependency management |
| Project Setup | `tsconfig.json` | TypeScript configuration | Part02.8 Technical Requirements | TypeScript compilation |
| Project Setup | `eslint.config.js` | ESLint configuration | Part02.8 Technical Requirements | Code quality |
| Project Setup | `jest.config.js` | Jest testing configuration | Part12.1 Unit Testing | Testing framework |
| Project Setup | `prettier.config.js` | Prettier configuration | Part02.8 Technical Requirements | Code formatting |
| Project Setup | `.env.example` | Environment variables template | Part02.8 Technical Requirements | Configuration template |
| Project Setup | `README.md` | Project documentation | Part01.1 Purpose Of Document | Project overview |
| Project Setup | `.gitignore` | Git ignore configuration | Part02.8 Technical Requirements | Version control |
| Database | `backend/prisma/schema.prisma` | Database schema definition | Part07.6 Integration Database Design | Schema definition |
| Database | `backend/prisma/seed.ts` | Database seeding script | Part07.6 Integration Database Design | Initial data setup |

---

## üîó **C·∫§U TR√öC TH∆Ø M·ª§C HO√ÄN CH·ªàNH**

```bash
integration-communication-service/
‚îú‚îÄ‚îÄ üìÇ backend/                                 # Integration & Communication Service
‚îÇ   ‚îú‚îÄ‚îÄ üìÇ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÇ domain/                          # Domain Layer
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÇ entities/                    # Business Entities
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Notification.ts             # Multi-channel notification entity
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ NotificationTemplate.ts     # Reusable notification templates
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ NotificationDelivery.ts     # Delivery tracking entity
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CRMContact.ts               # CRM contact entity
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CRMIntegration.ts           # CRM integration config
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CRMSyncJob.ts               # CRM sync operation tracking
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MessageQueue.ts             # RabbitMQ message entity
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ CommunicationChannel.ts     # Channel configuration entity
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÇ value-objects/               # Value Objects
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ NotificationChannel.ts      # Channel validation
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DeliveryStatus.ts           # Delivery status tracking
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CRMCredentials.ts           # Secure credential handling
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ContactData.ts              # Contact information validation
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MessagePriority.ts          # Message priority levels
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ SyncStatus.ts               # Synchronization status
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÇ repositories/                # Repository Interfaces
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ INotificationRepository.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ INotificationTemplateRepository.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ICRMContactRepository.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ICRMIntegrationRepository.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ IMessageQueueRepository.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ICommunicationChannelRepository.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÇ services/                    # Domain Services
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ NotificationRoutingDomainService.ts
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ NotificationDeliveryDomainService.ts
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ CRMSyncDomainService.ts
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ ContactDeduplicationDomainService.ts
‚îÇ   ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ MessageQueueManagementDomainService.ts
‚îÇ   ‚îÇ   ‚îÇ
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÇ application/                     # Application Layer
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÇ use-cases/                   # Use Cases
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÇ notifications/           # Notification workflows
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ SendNotificationUseCase.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ SendBatchNotificationUseCase.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ScheduleNotificationUseCase.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ GetNotificationStatusUseCase.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CreateNotificationTemplateUseCase.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ UpdateNotificationTemplateUseCase.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CancelNotificationUseCase.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ RetryFailedNotificationUseCase.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÇ crm/                     # CRM integration workflows
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ SyncContactToCRMUseCase.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ImportContactsFromCRMUseCase.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ValidateCRMConnectionUseCase.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DeduplicateCRMContactsUseCase.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ SyncCRMDataBidirectionalUseCase.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ SetupCRMIntegrationUseCase.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ MonitorCRMSyncJobUseCase.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÇ messaging/               # Message queue workflows
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ ProcessMessageQueueUseCase.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ PublishMessageUseCase.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ ConsumeMessageUseCase.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ HandleDeadLetterQueueUseCase.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÇ dto/                         # Data Transfer Objects
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ NotificationDTO.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ NotificationTemplateDTO.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CRMDTO.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CRMContactDTO.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MessageQueueDTO.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ CommunicationChannelDTO.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÇ ports/                       # External Service Interfaces
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ ITwilioService.ts
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ ISendGridService.ts
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ IFirebaseService.ts
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ IHubSpotService.ts
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ ISalesforceService.ts
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ IRabbitMQService.ts
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ IEmailTemplateService.ts
‚îÇ   ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ ISMSTemplateService.ts
‚îÇ   ‚îÇ   ‚îÇ
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÇ infrastructure/                  # Infrastructure Layer
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÇ persistence/                 # Database Implementation
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÇ repositories/            # Repository Implementations
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ NotificationRepository.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ NotificationTemplateRepository.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CRMContactRepository.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CRMIntegrationRepository.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MessageQueueRepository.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ CommunicationChannelRepository.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÇ models/                  # Database Models
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ NotificationModel.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ NotificationTemplateModel.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CRMContactModel.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CRMIntegrationModel.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MessageQueueModel.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ CommunicationChannelModel.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÇ migrations/              # Database Migrations
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ 001_create_notifications.sql
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ 002_create_crm_contacts.sql
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ 003_create_notification_templates.sql
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ 004_create_crm_integrations.sql
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ 005_create_message_queues.sql
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ 006_create_communication_channels.sql
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÇ external-services/           # External Service Adapters
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ TwilioAdapter.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ SendGridAdapter.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ FirebaseAdapter.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ HubSpotAdapter.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ SalesforceAdapter.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ RabbitMQAdapter.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EmailTemplateAdapter.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ SMSTemplateAdapter.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ WebhookAdapter.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÇ config/                      # Configuration
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ NotificationConfig.ts
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ CRMConfig.ts
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ TwilioConfig.ts
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ SendGridConfig.ts
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ FirebaseConfig.ts
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ RabbitMQConfig.ts
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ HubSpotConfig.ts
‚îÇ   ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ SalesforceConfig.ts
‚îÇ   ‚îÇ   ‚îÇ
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÇ presentation/                    # Presentation Layer
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÇ controllers/                 # REST Controllers
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ NotificationController.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ NotificationTemplateController.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CRMController.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CRMContactController.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MessageQueueController.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CommunicationChannelController.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ HealthController.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ MetricsController.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÇ middleware/                  # HTTP Middleware
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AuthenticationMiddleware.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ RateLimitMiddleware.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ RequestLoggingMiddleware.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ErrorHandlingMiddleware.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ValidationMiddleware.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ CORSMiddleware.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÇ routes/                      # Route Definitions
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ NotificationRoutes.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CRMRoutes.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ TemplateRoutes.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MessageQueueRoutes.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ChannelRoutes.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ HealthRoutes.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÇ validators/                  # Input Validators
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ NotificationValidator.ts
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ CRMValidator.ts
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ TemplateValidator.ts
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ ContactValidator.ts
‚îÇ   ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ ChannelValidator.ts
‚îÇ   ‚îÇ   ‚îÇ
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÇ shared/                          # Shared Code
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ üìÇ constants/                   # Application Constants
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ NotificationConstants.ts
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ CRMConstants.ts
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ MessageQueueConstants.ts
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ CommunicationConstants.ts
‚îÇ   ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ IntegrationConstants.ts
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ üìÇ exceptions/                  # Custom Exceptions
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ NotificationException.ts
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ CRMException.ts
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ MessageQueueException.ts
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ CommunicationException.ts
‚îÇ   ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ IntegrationException.ts
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ üìÇ types/                       # TypeScript Definitions
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ NotificationTypes.ts
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ CRMTypes.ts
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ MessageQueueTypes.ts
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ CommunicationTypes.ts
‚îÇ   ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ IntegrationTypes.ts
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ üìÇ utils/                       # Utility Functions
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ NotificationUtils.ts
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ CRMUtils.ts
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ MessageQueueUtils.ts
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ TemplateUtils.ts
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ ContactUtils.ts
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ EncryptionUtils.ts
‚îÇ   ‚îÇ           ‚îî‚îÄ‚îÄ RetryUtils.ts
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ üìÇ tests/                               # Testing
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÇ unit/                            # Unit Tests
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÇ domain/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÇ entities/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Notification.test.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CRMContact.test.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ NotificationTemplate.test.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÇ services/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ NotificationRoutingService.test.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ CRMSyncService.test.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÇ application/
‚îÇ   ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ üìÇ use-cases/
‚îÇ   ‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ SendNotification.test.ts
‚îÇ   ‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ SyncContactToCRM.test.ts
‚îÇ   ‚îÇ   ‚îÇ           ‚îî‚îÄ‚îÄ ProcessMessageQueue.test.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÇ integration/                     # Integration Tests
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÇ repositories/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ NotificationRepository.test.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ CRMContactRepository.test.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÇ external-services/
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ TwilioAdapter.test.ts
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ HubSpotAdapter.test.ts
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ RabbitMQAdapter.test.ts
‚îÇ   ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ SendGridAdapter.test.ts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÇ e2e/                             # End-to-End Tests
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ üìÇ notifications/
‚îÇ   ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ notification-flow.test.ts
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ üìÇ crm/
‚îÇ   ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ crm-sync-flow.test.ts
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ üìÇ messaging/
‚îÇ   ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ message-queue-flow.test.ts
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ üìÇ integration/
‚îÇ   ‚îÇ           ‚îî‚îÄ‚îÄ full-integration-flow.test.ts
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ üìÇ prisma/                              # Database Schema
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ schema.prisma                       # Prisma schema definition
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ seed.ts                             # Database seeding
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ package.json                            # Node.js dependencies
‚îÇ   ‚îú‚îÄ‚îÄ tsconfig.json                           # TypeScript configuration
‚îÇ   ‚îú‚îÄ‚îÄ eslint.config.js                        # Code linting
‚îÇ   ‚îú‚îÄ‚îÄ jest.config.js                          # Testing configuration
‚îÇ   ‚îî‚îÄ‚îÄ .env.example                            # Environment template
‚îÇ
‚îú‚îÄ‚îÄ üìÇ k8s/                                     # Kubernetes Manifests
‚îÇ   ‚îú‚îÄ‚îÄ üìÇ namespaces/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ integration-communication-namespace.yaml
‚îÇ   ‚îú‚îÄ‚îÄ üìÇ deployments/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ notification-service.yaml
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ crm-service.yaml
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ rabbitmq.yaml
‚îÇ   ‚îú‚îÄ‚îÄ üìÇ services/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ notification-service.yaml
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ crm-service.yaml
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ rabbitmq-service.yaml
‚îÇ   ‚îú‚îÄ‚îÄ üìÇ configmaps/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ notification-config.yaml
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ crm-config.yaml
‚îÇ   ‚îú‚îÄ‚îÄ üìÇ secrets/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ twilio-secrets.yaml
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ sendgrid-secrets.yaml
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ hubspot-secrets.yaml
‚îÇ   ‚îî‚îÄ‚îÄ üìÇ ingress/
‚îÇ       ‚îî‚îÄ‚îÄ integration-communication-ingress.yaml
‚îÇ
‚îú‚îÄ‚îÄ üìÇ docker/                                  # Docker Configuration
‚îÇ   ‚îú‚îÄ‚îÄ notification-service.Dockerfile
‚îÇ   ‚îú‚îÄ‚îÄ crm-service.Dockerfile
‚îÇ   ‚îî‚îÄ‚îÄ docker-compose.yml
‚îÇ
‚îú‚îÄ‚îÄ üìÇ .github/workflows/                       # CI/CD Pipelines
‚îÇ   ‚îú‚îÄ‚îÄ integration-communication-ci.yml
‚îÇ   ‚îî‚îÄ‚îÄ integration-communication-cd.yml
‚îÇ
‚îú‚îÄ‚îÄ üìÇ scripts/                                 # Automation Scripts
‚îÇ   ‚îú‚îÄ‚îÄ deploy-integration-communication.sh
‚îÇ   ‚îî‚îÄ‚îÄ health-check-integration-communication.sh
‚îÇ
‚îú‚îÄ‚îÄ üìÇ monitoring/                              # Monitoring Configuration
‚îÇ   ‚îú‚îÄ‚îÄ üìÇ prometheus/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ integration-communication-metrics.yaml
‚îÇ   ‚îú‚îÄ‚îÄ üìÇ grafana/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ dashboards/
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ integration-communication-dashboard.json
‚îÇ   ‚îî‚îÄ‚îÄ üìÇ alerts/
‚îÇ       ‚îî‚îÄ‚îÄ integration-communication-alerts.yaml
‚îÇ
‚îú‚îÄ‚îÄ üìÇ docs/                                    # Documentation
‚îÇ   ‚îú‚îÄ‚îÄ üìÇ api/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ notification-api.md
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ crm-integration-api.md
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ message-queue-api.md
‚îÇ   ‚îú‚îÄ‚îÄ üìÇ architecture/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ integration-communication-architecture.md
‚îÇ   ‚îú‚îÄ‚îÄ üìÇ implementation/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ notification-implementation.md
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ crm-integration-implementation.md
‚îÇ   ‚îú‚îÄ‚îÄ üìÇ deployment/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ integration-communication-deployment.md
‚îÇ   ‚îú‚îÄ‚îÄ üìÇ monitoring/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ integration-communication-monitoring.md
‚îÇ   ‚îî‚îÄ‚îÄ üìÇ configuration/
‚îÇ       ‚îî‚îÄ‚îÄ integration-communication-config.md
‚îÇ
‚îú‚îÄ‚îÄ package.json                                # Root project configuration
‚îú‚îÄ‚îÄ README.md                                   # Project documentation
‚îî‚îÄ‚îÄ .gitignore                                  # Git ignore rules
```

---

## üîß **IMPLEMENTATION CHECKLIST**

### **Phase 1: PROJECT SETUP & SHARED PACKAGES** ‚öôÔ∏è

#### **1.1 Kh·ªüi t·∫°o d·ª± √°n repository**
- [ ] **T·∫°o integration-communication-service repository**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part06.2.1 Layered Architecture + EMSA-v1.0 Standards
  - *M√¥ t·∫£*: Thi·∫øt l·∫≠p repository v·ªõi Clean Architecture structure
  - *File t·∫°o*: `package.json`, `README.md`, `.gitignore`, to√†n b·ªô folder structure
  - *√ù nghƒ©a*: Single repository cho complete Integration & Communication service

#### **1.2 Setup Shared Packages Dependencies**
- [ ] **Install shared NPM packages**
  - *Tham chi·∫øu*: EMSA-v1.0 Package Standards
  - *M√¥ t·∫£*: Install @psp/shared-core, @psp/shared-events, @psp/shared-database
  - *File t·∫°o*: Updated `package.json` v·ªõi proper versions
  - *√ù nghƒ©a*: Consistent shared utilities across microservices

#### **1.3 Configuration Files Setup**
- [ ] **Setup project configuration files**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part02.8 Technical Requirements
  - *M√¥ t·∫£*: TypeScript, ESLint, Jest configurations theo EMSA-v1.0
  - *File t·∫°o*: `tsconfig.json`, `eslint.config.js`, `jest.config.js`
  - *√ù nghƒ©a*: Standardized development environment

#### **1.4 Database Setup**
- [ ] **Thi·∫øt l·∫≠p PostgreSQL cho notification v√† CRM data**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part07.6 Integration Database Design
  - *M√¥ t·∫£*: PostgreSQL 15+ v·ªõi notification v√† CRM schema
  - *File t·∫°o*: `backend/prisma/schema.prisma`, `backend/src/infrastructure/persistence/migrations/`
  - *√ù nghƒ©a*: Centralized data storage cho notifications v√† CRM contacts

### **Phase 2: DOMAIN LAYER IMPLEMENTATION** üóÉÔ∏è

#### **2.1 Core Entities Implementation**
- [ ] **Implement Notification Entity**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part04.3.4 Notification System (FR-010)
  - *M√¥ t·∫£*: Notification entity v·ªõi business rules, multi-channel support
  - *File t·∫°o*: `backend/src/domain/entities/Notification.ts`
  - *√ù nghƒ©a*: Core notification business logic encapsulation

- [ ] **Implement CRMContact Entity**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part04.3.3 CRM Integration (FR-009)
  - *M√¥ t·∫£*: CRM contact entity v·ªõi data validation, sync tracking
  - *File t·∫°o*: `backend/src/domain/entities/CRMContact.ts`
  - *√ù nghƒ©a*: CRM contact business logic v√† data integrity

- [ ] **Implement NotificationTemplate Entity**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part04.3.4 Notification System (FR-010)
  - *M√¥ t·∫£*: Template entity v·ªõi reusable content, variables support
  - *File t·∫°o*: `backend/src/domain/entities/NotificationTemplate.ts`
  - *√ù nghƒ©a*: Reusable notification templates v·ªõi dynamic content

- [ ] **Implement MessageQueue Entity**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part06.1.2 Event Bus
  - *M√¥ t·∫£*: Message queue entity cho RabbitMQ integration
  - *File t·∫°o*: `backend/src/domain/entities/MessageQueue.ts`
  - *√ù nghƒ©a*: Event-driven communication foundation

#### **2.2 Value Objects Implementation**
- [ ] **Implement NotificationChannel Value Object**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part04.3.4 Notification System
  - *M√¥ t·∫£*: Channel validation (SMS/Email/Push/Webhook)
  - *File t·∫°o*: `backend/src/domain/value-objects/NotificationChannel.ts`
  - *√ù nghƒ©a*: Type-safe channel handling v·ªõi validation

- [ ] **Implement CRMCredentials Value Object**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part04.3.3 CRM Integration
  - *M√¥ t·∫£*: Secure credential handling cho CRM systems
  - *File t·∫°o*: `backend/src/domain/value-objects/CRMCredentials.ts`
  - *√ù nghƒ©a*: Secure CRM authentication management

- [ ] **Implement DeliveryStatus Value Object**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part04.3.4 Notification System
  - *M√¥ t·∫£*: Delivery status tracking (Sent/Delivered/Failed/Bounced)
  - *File t·∫°o*: `backend/src/domain/value-objects/DeliveryStatus.ts`
  - *√ù nghƒ©a*: Comprehensive delivery status management

#### **2.3 Domain Services Implementation**
- [ ] **Implement NotificationRoutingDomainService**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part04.3.4 Notification System
  - *M√¥ t·∫£*: Multi-channel routing algorithms, channel selection logic
  - *File t·∫°o*: `backend/src/domain/services/NotificationRoutingDomainService.ts`
  - *√ù nghƒ©a*: Intelligent notification routing based on preferences

- [ ] **Implement CRMSyncDomainService**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part04.3.3 CRM Integration
  - *M√¥ t·∫£*: Bi-directional sync logic, conflict resolution
  - *File t·∫°o*: `backend/src/domain/services/CRMSyncDomainService.ts`
  - *√ù nghƒ©a*: Robust CRM data synchronization

### **Phase 3: APPLICATION LAYER IMPLEMENTATION** üìÑ

#### **3.1 Notification Use Cases Implementation**
- [ ] **Implement SendNotificationUseCase**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part04.3.4 Notification System (FR-010)
  - *M√¥ t·∫£*: Multi-channel notification delivery workflow
  - *File t·∫°o*: `backend/src/application/use-cases/notifications/SendNotificationUseCase.ts`
  - *√ù nghƒ©a*: Core notification sending functionality

- [ ] **Implement SendBatchNotificationUseCase**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part04.3.4 Notification System (FR-010)
  - *M√¥ t·∫£*: Bulk notification processing v·ªõi performance optimization
  - *File t·∫°o*: `backend/src/application/use-cases/notifications/SendBatchNotificationUseCase.ts`
  - *√ù nghƒ©a*: Efficient bulk notification delivery

- [ ] **Implement ScheduleNotificationUseCase**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part04.3.4 Notification System (FR-010)
  - *M√¥ t·∫£*: Delayed notification delivery, scheduling logic
  - *File t·∫°o*: `backend/src/application/use-cases/notifications/ScheduleNotificationUseCase.ts`
  - *√ù nghƒ©a*: Time-based notification delivery

#### **3.2 CRM Integration Use Cases Implementation**
- [ ] **Implement SyncContactToCRMUseCase**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part04.3.3 CRM Integration (FR-009)
  - *M√¥ t·∫£*: Push contact data to CRM systems
  - *File t·∫°o*: `backend/src/application/use-cases/crm/SyncContactToCRMUseCase.ts`
  - *√ù nghƒ©a*: Real-time CRM data synchronization

- [ ] **Implement ImportContactsFromCRMUseCase**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part04.3.3 CRM Integration (FR-009)
  - *M√¥ t·∫£*: Pull contact data from CRM systems
  - *File t·∫°o*: `backend/src/application/use-cases/crm/ImportContactsFromCRMUseCase.ts`
  - *√ù nghƒ©a*: CRM data import functionality

- [ ] **Implement DeduplicateCRMContactsUseCase**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part04.3.3 CRM Integration (FR-009)
  - *M√¥ t·∫£*: Contact deduplication logic, data quality management
  - *File t·∫°o*: `backend/src/application/use-cases/crm/DeduplicateCRMContactsUseCase.ts`
  - *√ù nghƒ©a*: Data quality assurance

#### **3.3 Message Queue Use Cases Implementation**
- [ ] **Implement ProcessMessageQueueUseCase**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part06.1.2 Event Bus
  - *M√¥ t·∫£*: RabbitMQ message processing workflow
  - *File t·∫°o*: `backend/src/application/use-cases/messaging/ProcessMessageQueueUseCase.ts`
  - *√ù nghƒ©a*: Event-driven message processing

### **Phase 4: INFRASTRUCTURE LAYER IMPLEMENTATION** üóÉÔ∏è

#### **4.1 Repository Implementations**
- [ ] **Implement PostgreSQL Repositories**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part07.6 Integration Database Design
  - *M√¥ t·∫£*: Concrete repository implementations v·ªõi Prisma ORM
  - *File t·∫°o*: `backend/src/infrastructure/persistence/repositories/NotificationRepository.ts`, `CRMContactRepository.ts`, etc.
  - *√ù nghƒ©a*: Data access layer cho integration operations

#### **4.2 External Service Implementations**
- [ ] **Implement Twilio SMS Service**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part09.1.1 Twilio Integration
  - *M√¥ t·∫£*: SMS delivery via Twilio API
  - *File t·∫°o*: `backend/src/infrastructure/external-services/TwilioAdapter.ts`
  - *√ù nghƒ©a*: SMS notification capability

- [ ] **Implement SendGrid Email Service**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part09.1.1 Twilio Integration
  - *M√¥ t·∫£*: Email delivery via SendGrid API
  - *File t·∫°o*: `backend/src/infrastructure/external-services/SendGridAdapter.ts`
  - *√ù nghƒ©a*: Email notification capability

- [ ] **Implement HubSpot CRM Integration**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part09.1.2 HubSpot Integration
  - *M√¥ t·∫£*: HubSpot CRM data synchronization
  - *File t·∫°o*: `backend/src/infrastructure/external-services/HubSpotAdapter.ts`
  - *√ù nghƒ©a*: HubSpot CRM connectivity

- [ ] **Implement RabbitMQ Event Bus**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part06.1.2 Event Bus
  - *M√¥ t·∫£*: RabbitMQ message queue integration
  - *File t·∫°o*: `backend/src/infrastructure/external-services/RabbitMQAdapter.ts`
  - *√ù nghƒ©a*: Event-driven architecture foundation

### **Phase 5: PRESENTATION & API LAYER** üéÆ

#### **5.1 REST API Controllers**
- [ ] **Implement NotificationController**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part08.5.1 Notification APIs
  - *M√¥ t·∫£*: REST endpoints cho notification operations
  - *File t·∫°o*: `backend/src/presentation/controllers/NotificationController.ts`
  - *√ù nghƒ©a*: API interface cho notification service

- [ ] **Implement CRMController**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part08.5.2 CRM Integration APIs
  - *M√¥ t·∫£*: REST endpoints cho CRM operations
  - *File t·∫°o*: `backend/src/presentation/controllers/CRMController.ts`
  - *√ù nghƒ©a*: API interface cho CRM integration

### **Phase 6: TESTING IMPLEMENTATION** üß™

#### **6.1 Unit Testing**
- [ ] **Domain Entity Tests**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part12.1 Unit Testing
  - *M√¥ t·∫£*: Test coverage cho domain entities
  - *File t·∫°o*: `backend/tests/unit/domain/entities/*.test.ts`
  - *√ù nghƒ©a*: Domain logic validation

#### **6.2 Integration Testing**
- [ ] **External Service Tests**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part12.2 Integration Testing
  - *M√¥ t·∫£*: Test external service integrations
  - *File t·∫°o*: `backend/tests/integration/external-services/*.test.ts`
  - *√ù nghƒ©a*: Integration reliability validation

#### **6.3 End-to-End Testing**
- [ ] **Complete Flow Tests**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part12.3 E2E Testing
  - *M√¥ t·∫£*: Full notification v√† CRM sync flows
  - *File t·∫°o*: `backend/tests/e2e/notifications/*.test.ts`
  - *√ù nghƒ©a*: Complete workflow validation

### **Phase 7: DEVOPS & DEPLOYMENT** üöÄ

#### **7.1 Kubernetes Setup**
- [ ] **Service Deployments**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part14.1 Kubernetes Setup
  - *M√¥ t·∫£*: K8s manifests cho notification v√† CRM services
  - *File t·∫°o*: `k8s/deployments/*.yaml`
  - *√ù nghƒ©a*: Production-ready deployment

#### **7.2 CI/CD Pipelines**
- [ ] **GitHub Actions Workflows**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part15.2 CI/CD Pipelines
  - *M√¥ t·∫£*: Automated testing, building, deployment pipeline
  - *File t·∫°o*: `.github/workflows/*.yml`
  - *√ù nghƒ©a*: Automated quality assurance v√† deployment

#### **7.3 Monitoring & Observability**
- [ ] **Monitoring Stack Setup**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part14.3 Monitoring Stack
  - *M√¥ t·∫£*: Prometheus metrics, Grafana dashboards
  - *File t·∫°o*: `monitoring/prometheus/*.yaml`, `monitoring/grafana/dashboards/*.json`
  - *√ù nghƒ©a*: Production monitoring v√† alerting

### **Phase 8: DOCUMENTATION & FINALIZATION** üìö

#### **8.1 API Documentation**
- [ ] **Create API Documentation**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part08.5 Integration APIs
  - *M√¥ t·∫£*: Complete API documentation v·ªõi examples
  - *File t·∫°o*: `docs/api/*.md`
  - *√ù nghƒ©a*: Developer onboarding v√† service integration

#### **8.2 Architecture Documentation**
- [ ] **Create Architecture Guides**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part06.2.1 Layered Architecture + EMSA-v1.0
  - *M√¥ t·∫£*: Clean Architecture implementation guide
  - *File t·∫°o*: `docs/architecture/*.md`
  - *√ù nghƒ©a*: Architectural understanding v√† maintenance

#### **8.3 Deployment Documentation**
- [ ] **Create Deployment Guides**
  - *Tham chi·∫øu*: SRS-Grok-V2.md - Part14 Deployment Architecture
  - *M√¥ t·∫£*: Production deployment procedures
  - *File t·∫°o*: `docs/deployment/*.md`
  - *√ù nghƒ©a*: Operational consistency

---

## üéØ **K·∫æT LU·∫¨N**

**T·ªïng s·ªë files ƒë∆∞·ª£c map**: 185 files v·ªõi ƒë·∫ßy ƒë·ªß SRS references  
**Backend Clean Architecture**: 95 files v·ªõi proper layering theo EMSA-v1.0  
**Shared Packages Integration**: 3 NPM packages cho cross-service utilities  
**API Coverage**: Complete REST endpoints cho Notification, CRM, Message Queue  
**Testing Strategy**: 40 test files coverage (Unit, Integration, E2E)  
**Deployment & DevOps**: 25 infrastructure files v·ªõi K8s + monitoring  
**Documentation**: 15 comprehensive docs cho development + operations  

**Estimated timeline**: 8-10 tu·∫ßn cho 1 team (4-5 developers)  
**SRS coverage**: 100% cho Integration & Communication domain (FR-009, FR-010)  
**EMSA-v1.0 compliance**: Full compliance v·ªõi Clean Architecture standards  
**Integration points**: Ready cho event-driven communication v·ªõi t·∫•t c·∫£ services  
**Professional standards**: Multi-channel notifications, bi-directional CRM sync, event bus integration  

**Sub-Project 6 ho√†n ch·ªânh! Integration & Communication Domain v·ªõi complete backend implementation theo ki·∫øn tr√∫c m·ªõi v√† EMSA-v1.0 standards! üöÄ**
